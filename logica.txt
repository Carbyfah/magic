# LÓGICA DE NEGOCIO MAGIC TRAVEL v4.0 - SISTEMA MODULAR

## 1. GESTIÓN DE AGENCIAS Y OPERACIÓN v4.0

### 1.1 Modelo de Negocio Multi-Agencia
- **Magic Travel** es la agencia principal que opera rutas y tours
- **Otras agencias** pueden transferir clientes a Magic Travel
- **Magic Travel** puede transferir clientes a otras agencias
- **Relación many-to-many**: Agencias ↔ Rutas y Agencias ↔ Tours (via tablas pivote)
- **Sistema de comisiones** calculado en `reservas_servicios_detalle`

### 1.2 Estados del Sistema (Según seeders)
- **Vehículos**: Disponible → Asignado → Mantenimiento
- **Rutas**: Activada → Llena → Ejecución → Cerrada → Liquidar Ruta
- **Reservas**: Pendiente → Confirmada → Pagada → Transferida → Cancelada
- **Contabilidad**: Por Cobrar → Cobrados → Confirmar Recibido

## 2. SISTEMA MODULAR DE SERVICIOS v4.0

### 2.1 Estructura del Catálogo
```
tipos_servicio (Transporte, Tour, etc.)
    ↓
servicios_catalogo (Transporte Antigua-Panajachel, Tour Atitlán)
    ↓
agencias_servicios_precios (Precio por agencia + descuentos)
    ↓
reservas_servicios_detalle (Los "platos" de cada reserva)
```

### 2.2 Modalidades de Servicio (Campo real DB)
```
MODALIDAD_SERVICIO:
- 'COLECTIVO': Precio por persona
- 'PRIVADO': Precio fijo total

CÁLCULO AUTOMÁTICO:
- Precio Adulto = precio_unitario_adulto
- Precio Niño = precio_unitario_nino
- Descuento = descuento_aplicado (0-100%)
```

### 2.3 Operación de Rutas y Tours
```
Ruta Base + Fecha/Hora + Vehículo = Ruta Activa
Tour Base + Fecha/Hora + Tipo = Tour Activo

CADA SERVICIO DE LA RESERVA:
- Se asocia a ruta_activa O tour_activo
- Tiene su propio precio y cantidad
- Maneja su estado de pago independiente
```

## 3. ESCENARIOS DE RESERVA v4.0 (5 TIPOS EXACTOS)

### 3.1 VENTA_DIRECTA
```
- escenario_reserva: 'VENTA_DIRECTA'
- agencia_origen: NULL
- id_agencia_transferida: NULL
- Magic Travel vende y opera directamente
- Cliente paga a Magic Travel
```

### 3.2 REUBICACION_INTERNA
```
- escenario_reserva: 'REUBICACION_INTERNA'
- agencia_origen: Magic Travel ID
- id_agencia_transferida: Magic Travel ID
- Cliente se mueve entre servicios de Magic Travel
- No hay intercambio de dinero
```

### 3.3 MAGIC_TRANSFIERE
```
- escenario_reserva: 'MAGIC_TRANSFIERE'
- agencia_origen: Magic Travel ID
- id_agencia_transferida: Otra Agencia ID
- Magic Travel recibe pero transfiere operación
- Magic Travel cobra comisión
```

### 3.4 MAGIC_RECIBE_OPERA
```
- escenario_reserva: 'MAGIC_RECIBE_OPERA'
- agencia_origen: Otra Agencia ID
- id_agencia_transferida: NULL
- Magic Travel opera servicio de otra agencia
- Magic Travel cobra a la agencia origen
```

### 3.5 MAGIC_RECIBE_TRANSFIERE
```
- escenario_reserva: 'MAGIC_RECIBE_TRANSFIERE'
- agencia_origen: Otra Agencia ID
- id_agencia_transferida: Tercera Agencia ID
- Magic Travel recibe de una y transfiere a otra
- Magic Travel NO gana comisión (solo intermediario)
- comision_monto = 0, comision_porcentaje = 0
```

## 4. ESTRUCTURA DE RESERVAS v4.0

### 4.1 Tabla Principal: reservas
```
CAMPOS OBLIGATORIOS:
- reservas_nombres_cliente, reservas_apellidos_cliente
- reservas_direccion_abordaje, reservas_telefono_cliente
- fecha_servicio (nueva v4.0)
- escenario_reserva (enum con 5 opciones)
- estado_id

CAMPOS OPCIONALES:
- reservas_cliente_nit, reservas_habitacion_pax
- observaciones_generales
- agencia_origen, id_agencia_transferida
```

### 4.2 Tabla Detalle: reservas_servicios_detalle
```
CADA SERVICIO INCLUYE:
- id_servicio_catalogo (del catálogo modular)
- id_ruta_activa O id_tour_activo (mutuamente excluyente)
- cantidad_adultos, cantidad_ninos
- precios individuales y totales
- agencia_operadora (quién ejecuta)
- estado_pago independiente
- comisiones calculadas
```

### 4.3 Control de Vouchers: vouchers_sistema
```
CAMPOS:
- codigo_voucher (único e inmutable)
- id_reservas (relación con reserva)
- fecha_generacion, es_valido
```

## 5. SISTEMA DE PAGOS Y CAJA v4.0

### 5.1 Estados de Pago (Campo real DB)
```
estado_pago en reservas_servicios_detalle:
- 'PENDIENTE': Sin pago
- 'PAGADO_CAJA': Pago en oficina
- 'PAGADO_CONDUCTOR': Pago al conductor
- 'CONFIRMAR_RECIBIDO': Conductor entregó, pendiente confirmar
```

### 5.2 Tabla Caja (Solo ventas directas Magic Travel)
```
CREACIÓN AUTOMÁTICA cuando estado_pago = 'PAGADO_CAJA'
- Registro de ingresos por servicio
- Control de vouchers y facturas SAT
- Relación directa con id_reservas
```

## 6. CONTROL FINANCIERO v4.0

### 6.1 Comisiones por Servicio
```
EN reservas_servicios_detalle:
- precio_venta_cliente (lo que paga el cliente)
- precio_compra_agencia (costo para agencia origen)
- comision_monto (ganancia Magic Travel)
- comision_porcentaje (% aplicado)
```

### 6.2 Egresos por Ruta: egresos_ruta_activa
```
GASTOS OPERACIONALES:
- motivo_egreso, cantidad_egreso
- descripcion_egreso
- id_ruta_activa (asociado a ruta específica)

CÁLCULO RENTABILIDAD:
Ganancia = Σ(comision_monto) - Σ(cantidad_egreso) - vehiculo_pago_conductor
```

## 7. MÓDULO DE VENTAS v4.0

### 7.1 Filtros por Estado de Pago
```
POR_COBRAR: estado_pago IN ('PENDIENTE')
COBRADOS: estado_pago IN ('PAGADO_CAJA', 'PAGADO_CONDUCTOR')
CONFIRMAR_RECIBIDO: estado_pago = 'CONFIRMAR_RECIBIDO'
```

### 7.2 Liquidación de Rutas
```
VALIDACIONES:
1. Todos los servicios con estado_pago != 'PENDIENTE'
2. Todos los egresos registrados
3. Estado ruta = 'Liquidar Ruta'

PROCESO:
1. Confirmar todos los pagos de conductor
2. Validar egresos completos
3. Calcular ganancia neta final
4. Cerrar ruta contablemente
```

## 8. MÓDULO DE CONTABILIDAD v4.0

### 8.1 Estados de Cuenta por Agencia
```
PARA CADA AGENCIA:
- Servicios donde es agencia_origen (debe a Magic Travel)
- Servicios donde es agencia_operadora (Magic Travel le debe)
- Comisiones ganadas/pagadas por escenario
- Balance neto calculado
```

### 8.2 Control de Vouchers
```
vouchers_sistema:
- Generación automática para transferencias
- Validación de integridad (es_valido)
- Trazabilidad completa por reserva
```

## 9. VALIDACIONES DE NEGOCIO v4.0

### 9.1 Reservas
```
OBLIGATORIAS:
- Una reserva DEBE tener al menos un detalle en reservas_servicios_detalle
- Cada detalle DEBE tener ruta_activa O tour_activo (no ambos)
- cantidad_adultos > 0, cantidad_ninos >= 0
- escenario_reserva debe ser uno de los 5 definidos
```

### 9.2 Servicios
```
OBLIGATORIAS:
- precio_venta_cliente >= precio_compra_agencia
- descuento_aplicado entre 0 y 100
- comision_porcentaje entre 0 y 100
- agencia_operadora debe existir y estar activa
```

### 9.3 Capacidad de Vehículos
```
CONTROL AUTOMÁTICO:
- Suma de cantidad_adultos + cantidad_ninos por ruta_activa
- No exceder vehiculo_capacidad
- Cambio automático de estado a "Llena" al completarse
```

## 10. PERMISOS GRANULARES v4.0

### 10.1 Módulos del Sistema (Campo real DB)
```
usuarios_permisos.modulo:
'reservas', 'rutas', 'tours', 'vehiculos', 'empleados'
'reportes', 'configuracion', 'agencias', 'ventas', 'contabilidad', 'servicios'

PERMISOS POR MÓDULO:
- puede_ver, puede_crear, puede_editar, puede_eliminar
- puede_exportar_excel, puede_exportar_pdf (nuevos v4.0)
```

## 11. FLUJO OPERACIONAL v4.0

### 11.1 Proceso de Reserva Completo
```
1. CREAR RESERVA (tabla reservas con escenario)
2. AGREGAR SERVICIOS (tabla reservas_servicios_detalle)
3. GENERAR VOUCHER (tabla vouchers_sistema)
4. PROCESAR PAGOS (actualizar estado_pago)
5. CREAR ENTRADA CAJA (si es venta directa pagada)
6. LIQUIDAR SERVICIOS (confirmar pagos y egresos)
```

### 11.2 Integración Completa v4.0
```
reservas → reservas_servicios_detalle → caja → facturas_sat
    ↓              ↓                        ↓
vouchers_sistema  ruta_activa/tour_activo  egresos_ruta_activa
```

Esta lógica v4.0 elimina la dependencia de triggers de DB y 
centraliza toda la lógica de negocio en el backend Laravel para máximo control y mantenibilidad.